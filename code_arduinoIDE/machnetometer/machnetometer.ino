#include <Wire.h>

#define addr_machnetometer 0x0C 

const uint8_t CRC_TABLE[256] = {
 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15,
 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
 0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65,
 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
 0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5,
 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
 0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85,
 0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,
 0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2,
 0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA,
 0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2,
 0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,
 0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32,
 0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A,
 0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42,
 0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A,
 0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C,
 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
 0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC,
 0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4,
 0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C,
 0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44,
 0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C,
 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,
 0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B,
 0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63,
 0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B,
 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
 0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB,
 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
 0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB,
 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
};
const float gainMultipliers[16] = {
  0.2, 0.25,  0.333333333, 1.4, 1.5,  0.6, 0.75,  1,  
  0.1, 0.125, 0.666666666, 0.2, 0.25, 0.3, 0.375, 0.5
};
uint8_t _gain=8;

struct int16_3{
  int16_t x;
  int16_t y;
  int16_t z;
};struct float_3{
  float x;
  float y;
  float z;
};struct return_machnetometer{
  bool corect;
  uint8_t status;
  int16_3 magneet;
  int16_t temp;
  int16_t volt;
};struct converted_machnetometer{
  bool corect;
  uint8_t status;
  float_3 magneet;  //[mT]
  float temp; //[°C]
  float volt; //[V]
};

void setup() {
  Wire.setPins(10, 11);
  Wire.begin();
  Serial.begin(115200);
  read_voltage();
  delay(1000);
  print_resolt();
  start_burst_mode();
  /*pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  delay(10000);*/
}

void loop() {
  /*digitalWrite(10,HIGH);
  delay(1000);
  digitalWrite(10,LOW);
  delay(1000);
  return;*/
  print_resolt();
  delay(100);
}
void print_resolt(){
  converted_machnetometer data = convert_data(get_data());
  //return_machnetometer data = get_data();
  Serial.print(data.magneet.x);
  Serial.print("\t");
  Serial.print(data.magneet.y);
  Serial.print("\t");
  Serial.print(data.magneet.z);
  Serial.print("\t");
  Serial.print(data.temp);
  Serial.print("\t");
  Serial.print(data.volt);
  Serial.print("\t");
  Serial.print(data.corect?"corect":"fault");
  Serial.print("\t");
  Serial.println(data.status,BIN);
}

void start_burst_mode(){
  Wire.beginTransmission(addr_machnetometer);
  Wire.write(0x02<<1);
  Wire.write(0x22); //leg VmeasEN aan (voltage meter)
  Wire.write(0xA0);
  Wire.endTransmission(true);
  Wire.beginTransmission(addr_machnetometer);
  Wire.write(0x80);
  Wire.write(0x10);
  Wire.endTransmission();
}void read_voltage(){
  Wire.beginTransmission(addr_machnetometer);
  Wire.write(0x80);
  Wire.write(0xC0);
  Wire.endTransmission();
}
float_3 change_raw_to_mT(int16_3 raw){
  float_3 output;
  output.x=(float)raw.x*gainMultipliers[_gain]*7.14/1000; //7.14[µT/lsb16] raw[lsb16] 1000[mT/µT]
  output.y=(float)raw.y*gainMultipliers[_gain]*7.14/1000; //7.14[µT/lsb16] raw[lsb16] 1000[mT/µT]
  output.z=(float)raw.z*gainMultipliers[_gain]*7.14/1000; //7.14[µT/lsb16] raw[lsb16] 1000[mT/µT]
  return output;
}
converted_machnetometer convert_data(return_machnetometer data_in){
  converted_machnetometer data;
  data.corect=data_in.corect;
  data.status=data_in.status;
  data.magneet=change_raw_to_mT(data_in.magneet);
  data.temp=(float)data_in.temp/ 50 ; //50[lsb14/°C] temp[lsb14]
  data.volt=(float)data_in.volt/5500; //5500[lsb16/V] volt[lsb16]
  return data;
}
return_machnetometer get_data(){
  return_machnetometer value;
  uint8_t CRC=0,i=0;
  uint8_t get[12];
  Wire.beginTransmission(addr_machnetometer);
  Wire.write(0x80);
  Wire.endTransmission(false);
  Wire.requestFrom(addr_machnetometer, 12, true);
  while(Wire.available()) {
    get[i] = Wire.read();
    if(i>1){
      CRC=CRC_TABLE[CRC^get[i]];
    }
    i++;
  }
  value.corect=(CRC==get[1]);
  value.status=get[0];
  value.magneet.x=(get[2]<<8)|get[3];
  value.magneet.y=(get[4]<<8)|get[5];
  value.magneet.z=(get[6]<<8)|get[7];
  value.temp=(get[8 ]<<8)|get[9 ];
  value.volt=(get[10]<<8)|get[11];
  return value;
}
